Saira (Data input and sound implementation):

To apply an aesthetic feature for the chips, I searched on google for textured, colored images. Since our chips are black and red, I found moderate resolution images of red and black color that had a nice design. Then, using photoeditor, I cropped and resized the images so that they were smaller. The resolution wouldn't have had much effect on the output, so I just used textured images that I found and edited the color as well so that when the images inputted into the game, they would work seamlessly with the chips. The final product shows the chips with a nice design, instead of being plain colors. 

For sound, I searched the web for appropriate sound files that could be implemented as the background music, winner and tie sounds, and the chip dropping sound. After finding these files and chopping some in an audio editor, I uploaded them to the data folder and the program incorporates these sounds at the respective action; for example, when a player drops a chip or wins, a certain sound is heard. The background music is mutable using the 'a' and 's' keys, for accessibility. 

Peter (Game Mechanics, Animation hierarchies, keyboard input):
I created the Game mechanics, displaying the board, and animation. The GameRunner class handled all the game mechanics. I used a 2d character array to represent the board to keep track of whose piece is in which spot. An int array allowed me to keep track of how far the pieces fall to the bottom in each column. Then everytime a player makes a move, the 2d array would update to it's corrected and corrected board, then would display in the draw function. A method would check to see who wins every time the draw function runs. Since the 2d array starts from the top left, I would only have to check "east", "southeast", "south", and "southwest" directions, while making sure I don't go over the array lengths. Then another method will check which winner, or if they ran out of turns, thus a tie. 

The animation hiearchy was represented by the piece the player is "holding". The method in the mouse class displayed the correct color of the connect four piece and would float over the mouse. Another method calculated which column the mouse is over, and would display an arrow bouncing according to where the mouse is. Another method is used to return which column number the mouse is hovering over, so that the GameRunner class can update the 2d array correctly. 

The Keyboard input makes sure that sound comes through when 'a' is pressed during the game and stops when 's' is pressed. The game will also record the names of the players by having them write in their names in the text field when the game starts. Also the mouseclicks will use methods from the mouse class. 


Marco (GUI):
The main menu and general interactivity provided by me. The main menu was kept as simple as possible for a connect 4 game. It provides necessary information  such as credits and instruction. The play button is also straight forward. A player must click play and enter games and this person can start playing inmediately. This is a ad free and minimalist approach for a simple and enjoyable game. I had to decide how to do the menu: either using everything from a library or using the built in functions from processing. I ended up using both. The first menu buttons use default p-shapes but their clicking and their shading is based whether the mouse is within the area of the button and the mouse has been clicked. This proved to be rather tedious, so I chose a library to do the remianing options. The difficult part about using the library is familiarizing oneself to it and ask the right questions in order to find the right functionality desired. A wrong question led me to waste hours trying to find a solution for such question. Keyboard input is done at the name entry and mutable sound.

I was also in charge making sure of putting all the parts together (ingame and menu) and make sure everything is in the respective spot. I learned to love booleans, and I have never dealt with so many boolean variables. This is pretty chaotic and required me to keep calm at the blocks of code in front of me, despite everything looking organized. Then i made sure my fonts, colors, text and shape size were in accordance with the whole project.



Challenges: 
